"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[799],{4569:function(n,a,e){e.r(a),e.d(a,{Head:function(){return i},default:function(){return m}});var s=e(1151),t=e(7294);function p(n){const a=Object.assign({p:"p",h2:"h2",em:"em",span:"span",a:"a",h3:"h3"},(0,s.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Aujourd'hui, j'aimerai aborder la programmation sur un ton plus léger. Je voudrais vous raconter comment j'ai découvert la programmation\r\norientée objet, comment je l'ai comprise et comment tout cela m'a amené à concevoir un projet assez... original !"),"\n",t.createElement(a.h2,null,"Au commencement"),"\n",t.createElement(a.p,null,"J'ai commencé l'apprentissage de la programmation avec java fin 2012. J'ai d'abord appris la programmation impérative et j'aprenanit avec\r\npas mal d'aisance. Puis j'ai migré sur la programmation orienté objet et là, cela s'est beaucoup moins bien passé. Avec le recul je pense\r\nque cela est dû à plusieurs facteurs. D'abord les travaux à réaliser étaient moins créatif car ils s'agissait beaucoup d'écriture\r\nde setteurs de getteurs : du code bien redondant à coup de copier coller. De plus, j'ai été confronté à ce que j'appelle le problème du\r\npourquoi vs comment. C'est à dire que les cours étaient bien plus orienté sur ce que la poo apportait sans pour autant justifier ces choix\r\nde design. je savais comment ça marchait, mais pas pourquoi ça marchait comme ça."),"\n",t.createElement(a.p,null,"Cela durera jusqu'en 2015 où, pendant que je suivais des moocs de programmation, je tombait sur un langage assez exotique vis à vis de ce\r\nque je connaissais jusque là : Pharo. Contrairement à Java où Php, Pharo est un langage de programmation objet pur et les instructions impératives\r\nde ces deux langages, comme les conditions et les boucles, sont alors des appels de méthode. Autre changement assez conséquent : les classes\r\nelle-même sont des objets."),"\n",t.createElement(a.p,null,"Malgré sa syntaxe assez particulière et le fait que je n'ai toujours pas produit de code pharo à ce jour, ça a été une révélation qui m'a grandement\r\naidé à comprendre l'orienté objet."),"\n",t.createElement(a.p,null,"Pour un peu de culture, voici un exmeple de code pharo, tiré du livre ",t.createElement(a.em,null,"pharo par l'exemple"),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="smalltalk"><pre style="counter-reset: linenumber NaN" class="language-smalltalk line-numbers"><code class="language-smalltalk">initialize\r\n  <span class="token temporary-variables"><span class="token punctuation">|</span> <span class="token variable">sampleCell</span> <span class="token variable">width</span> <span class="token variable">height</span> <span class="token variable">n</span> <span class="token punctuation">|</span></span>\r\n  <span class="token keyword">super</span> initialize<span class="token punctuation">.</span>\r\n  n <span class="token operator">:=</span> <span class="token keyword">self</span> cellsPerSide<span class="token punctuation">.</span>\r\n  sampleCell <span class="token operator">:=</span> LOCell <span class="token keyword">new</span><span class="token punctuation">.</span>\r\n  width <span class="token operator">:=</span> sampleCell width<span class="token punctuation">.</span>\r\n  height <span class="token operator">:=</span> sampleCell height<span class="token punctuation">.</span>\r\n  <span class="token keyword">self</span> bounds<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">@</span><span class="token number">5</span> extent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token operator">@</span><span class="token punctuation">(</span>height<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">self</span> borderWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\r\n  cells <span class="token operator">:=</span> Matrix <span class="token keyword">new</span><span class="token punctuation">:</span> n tabulate<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token block-arguments"><span class="token variable">:i</span> <span class="token variable">:j</span> <span class="token punctuation">|</span></span> <span class="token keyword">self</span> newCellAt<span class="token punctuation">:</span> i at<span class="token punctuation">:</span> j <span class="token punctuation">]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",t.createElement(a.h2,null,"Et Php dans tout ça ?"),"\n",t.createElement(a.p,null,"C'est peu de temps après que je me suis penché sur le langage Php, et l'onboarding n'a pas été des plus fameux ! Je pourrais critiquer pas mal de\r\npoints mais je me concentrerais sur un seul, ce n'était pas l'orienté objet que j'avais appris à aimer. Cela a été la source de pas mal de\r\nfrustration, au point qu'il m'est venu l'envie d'y palier en lançant un projet assez loufoque : recréer l'OOP de PHP. N'étant pas sûr de la\r\npossibilité d'une telle démarche, je décide de ne renomer ",t.createElement(a.em,null,"Php's Object Oriented Project"),", ou POOP pour les intimes."),"\n",t.createElement(a.p,null,"Les premier essais ne sont pas fameux et font usage de code assez discutable. C'est assez logique, si je veux retrouver cette POO que j'aime\r\nil me faut refaire la classes, l'héritage, l'accès à self et super... tout ça n'est pas chose aisée. Pour vous montrer un exmeple, voici un\r\nbout de code du premier jet avec une fonction ",t.createElement(a.em,null,"self")," qui renvoi l'objet qui l'appelle :"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre style="counter-reset: linenumber NaN" class="language-php line-numbers"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\r\n    <span class="token variable">$objet</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token variable">$objet</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"object"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",t.createElement(a.p,null,"Mon code complet est disponible ",t.createElement(a.a,{href:"https://github.com/HellperKK/Poop/blob/087e249d783ff5058f7aafd87a802bd8855500dc/Lib.php"},"ici"),", et on peut trouver\r\nd'autres excentircités de code. Pour cette raison, le projet sera mis de côté, faute d'être une solution pratique à utiliser. Jusqu'au\r\njour où, j'ai repris le projet."),"\n",t.createElement(a.h2,null,"IO, javascript et prototypage"),"\n",t.createElement(a.p,null,"Si j'aime l'idée que les classes soient des objets, je dois avouer que cela implique pas mal de complexité. En Pharo chaque classe crée\r\najoute la création d'une metaclasse dont la classe est instance, avec un arbre d'héritage de metaclasses en parallèle de celuid es classes.\r\nIl y a aussi ruby, qui propose une alternative moins lourde mais tout de même tordue à mon sens. Toute classe est instance de la classe ",t.createElement(a.em,null,"Class"),",\r\nqui est instance d'elle-même, et hérite indirectement de la class ",t.createElement(a.em,null,"Object")," qui du coup est aussi instance de la classe ",t.createElement(a.em,null,"Class"),". De quoi donner le\r\ntourni..."),"\n",t.createElement(a.p,null,"Au bout d'un moment et à force de réfléchir m'est venur une question : si je veux manipuler des objets qui sont instances de classes elle-même objet,\r\nne serait-être pas préférable de mettre les deux concept de classes et d'instances au même niveau pour ne manipuler que des objets ? c'est ainsi que\r\nje me suis intéressé au concept de prototype."),"\n",t.createElement(a.p,null,"En m'inspirant des langages de programmtion IO et javascript (avec un peu de python), j'ai trouvé moyen de faire une bibliothèque Php permetant de\r\nfaire de la Poo sans avoir à écrire de classe. Une seule classe est nécessaire et est déjà fournie. Le fonctionnement est le suivant :"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre style="counter-reset: linenumber NaN" class="language-php line-numbers"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\r\n\r\n<span class="token comment">// On crée une instance en clonant l\'objet statique object de la bibliothèque</span>\r\n<span class="token keyword">include</span> <span class="token string double-quoted-string">"src/lib.php"</span><span class="token punctuation">;</span>\r\n<span class="token variable">$Range</span> <span class="token operator">=</span> <span class="token class-name static-context">Instance</span><span class="token operator">::</span><span class="token keyword type-declaration">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token comment">// On définit les propriété de notre objet range</span>\r\n<span class="token variable">$Range</span><span class="token operator">-></span><span class="token property">max</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\r\n<span class="token variable">$Range</span><span class="token operator">-></span><span class="token property">min</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n\r\n<span class="token comment">// Pour la méthode, comme en python le premier paramètre est l\'instance et est obligatoire</span>\r\n<span class="token comment">// Il est passé implicitement à la méthode, qu\'on utilise comme ceci => $Range->include(42)</span>\r\n<span class="token variable">$Range</span><span class="token operator">-></span><span class="token property">include</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$self</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>\r\n<span class="token punctuation">{</span>\r\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$self</span><span class="token operator">-></span><span class="token property">max</span> <span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$self</span><span class="token operator">-></span><span class="token property">min</span> <span class="token operator">&lt;=</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n\r\n<span class="token comment">// On peut créer une méthode make pour produire des ranges à volonté</span>\r\n<span class="token variable">$Range</span><span class="token operator">-></span><span class="token property">make</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$self</span><span class="token punctuation">,</span> <span class="token variable">$min</span><span class="token punctuation">,</span> <span class="token variable">$max</span><span class="token punctuation">)</span>\r\n<span class="token punctuation">{</span>\r\n  <span class="token variable">$new</span> <span class="token operator">=</span> <span class="token variable">$self</span><span class="token operator">-></span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token variable">$new</span><span class="token operator">-></span><span class="token property">min</span> <span class="token operator">=</span> <span class="token variable">$min</span><span class="token punctuation">;</span>\r\n  <span class="token variable">$new</span><span class="token operator">-></span><span class="token property">max</span> <span class="token operator">=</span> <span class="token variable">$max</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">return</span> <span class="token variable">$new</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n\r\n<span class="token comment">// A l\'usage</span>\r\n<span class="token variable">$newRange</span> <span class="token operator">=</span> <span class="token variable">$Range</span><span class="token operator">-></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token variable">$newRange</span><span class="token operator">-></span><span class="token function">include</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",t.createElement(a.p,null,"Le repo du projet est trouvable à ",t.createElement(a.a,{href:"https://github.com/HellperKK/Poop"},"cette adresse")),"\n",t.createElement(a.h2,null,"Conclusion"),"\n",t.createElement(a.p,null,"En conclusion je dirais que j'ai beaucoup exploré le concept d'oreinté objet durant cette aventure. C'est un paradigme léger\r\nqui permet de nombreuses interprétations, ce qui peut lui être reproché mais j'y vois aussi une force. Au final je n'utilise pas\r\nPoop dans mon code Php et je suis assez dubitatif quant à ses perofrmances, mais je suis content de ce que j'ai pu apprendr en chemin."),"\n",t.createElement(a.h3,null,"Epilogue et limonade"),"\n",t.createElement(a.p,null,"En plus de cela, j'ai fini par ajouter cette forme d'orienté objet dans un langage de programmation que je développe, que j'ai baptisé\r\nlimonade. Son nom viens de la grande lignée des langages générant du javascript (coffescript, caffeine, earl grey...). Bien qu'il me reste\r\nencore beaucoup de travail, limonade a pour but d'être un langage de programmation statiquement typé, oreinté objet et fonctionnel, mais\r\ntrès peu impératif, qui transpilera en js. Ce qui j'espère lui permettra de sortir du lot :)"),"\n",t.createElement(a.p,null,"Merci d'avoir lu et à une prochaine !"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=e(4988),r=e(4001),c=e(8032);const u=n=>{let{data:a,children:e}=n;const s=(0,c.c)(a.mdx.frontmatter.hero_image);return t.createElement(l.Z,{pageTitle:a.mdx.frontmatter.title},t.createElement("p",null,a.mdx.frontmatter.date),t.createElement("hr",null),t.createElement("div",{className:"flex flex-row justify-center"},t.createElement("div",null,t.createElement(c.G,{image:s,alt:a.mdx.frontmatter.hero_image_alt}),""!==a.mdx.frontmatter.hero_image_credit_link&&t.createElement("p",null,"Photo Credit:"," ",t.createElement("a",{href:a.mdx.frontmatter.hero_image_credit_link},a.mdx.frontmatter.hero_image_credit_text)))),t.createElement("div",null,e))},i=n=>{let{data:a}=n;return t.createElement(r.Z,{title:a.mdx.frontmatter.title})};function m(n){return t.createElement(u,n,t.createElement(o,n))}},1151:function(n,a,e){e.d(a,{ah:function(){return p}});var s=e(7294);const t=s.createContext({});function p(n){const a=s.useContext(t);return s.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-php-poo-index-mdx-0bd7c85452ad5b8cf14b.js.map