"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[57],{4469:function(n,s,a){a.r(s),a.d(s,{Head:function(){return i},default:function(){return k}});var p=a(1151),e=a(7294);function t(n){const s=Object.assign({p:"p",ul:"ul",li:"li",h2:"h2",span:"span",a:"a"},(0,p.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"Il y a quelques années je suis tombé sur un article proposant d'implémenter en java 8\r\nles switch expression sortis en java 12 à l'aide d'expressions lambda. J'avais bien aimé sa lecture\r\net la mise en avant de certains concepts, néanmoins j'étais déçu par plusieurs points du code final, en particulier :"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"Les cases n'étaient pas vraiment exécutés dans l'odre de leur décralation."),"\n",e.createElement(s.li,null,"Il n'était pas vraiment possible d'étendre les cases présents"),"\n"),"\n",e.createElement(s.p,null,"Pour ces deux raisons, j'ai décidé de tenter moi aussi la réécriture du switch à ma manière, et de voir ce que je peux apprendre en chemin."),"\n",e.createElement(s.h2,null,"Premier jet"),"\n",e.createElement(s.p,null,"En décortiquant la structure du switch, je note trois parties :"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"La valeur à match"),"\n",e.createElement(s.li,null,"Un ensemble de cas, chacun lié à une valeur retournée"),"\n",e.createElement(s.li,null,"Un cas ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">default</code>'}}),", qui renvois sa valeur si rien ne correspond avant."),"\n"),"\n",e.createElement(s.p,null,"Pour cete raison, il me semble important de commencer mon code par le type d'un cas, représenté par un test de\r\ncorrespondace et la valeur à renvoyer si le test passe."),"\n",e.createElement(s.p,null,"Pour ce faire, je décide de crée une interface :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Une méthode pour le tester le cas et une pour le retour. Comme je ne sais pas à l'avance les types de la valeur\r\nà tester ou de celle retournée, j'ai donc besoin de deux génériques, V pour ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Value</code>'}}),", et R pour ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Return</code>'}}),"."),"\n",e.createElement(s.p,null,"À partir de là je peux alors définir la classe implémentant mon switch :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rule</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span><span class="token punctuation">></span></span> rules<span class="token punctuation">;</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">R</span> def<span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">Switcher</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Où j'ai donc ma collection des règles, la valeur à tester et la valeur de retour par défaut\r\n(Si non founie, je renvois null par défaut). Je retrouve aussi les génériques utilisés dans mon interface."),"\n",e.createElement(s.p,null,"Je peux ensuite ajouter trois méthodes pour m'en servir :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">addRule</span><span class="token punctuation">(</span><span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">public</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">defaults</span><span class="token punctuation">(</span><span class="token class-name">R</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> rule<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>def<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Rien d'extraordinaire ici, une méthode pour ajouter des règles et un pour définir le default,\r\npuis une méthode pour exécuter le tout : je parcours les règles et je renvois le retour de la première valide.\r\nJe renvois ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this.def</code>'}})," si je n'en trouve pas."),"\n",e.createElement(s.p,null,"Avec ce code, je suis déjà en mesure de produire un exemple de switch :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\r\n\r\n<span class="token class-name">String</span> reponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token string">"impossible !"</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n\r\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> <span class="token string">"le meilleur age !"</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> value <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n\r\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> <span class="token string">"en voilà un enfant !"</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> value <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n\r\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> <span class="token string">"bande de jeunes decadents !"</span><span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reponse<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Le code fait usage des classes anonymes pour chaque cas, et ça marche très bien.\r\nUn avantage est qu'on peut définir chaque cas sans avoir à recréer une classe dédiée, ce qui serait nécessaire ici\r\npuisque chaque implémentation de test est différente d'un cas à l'autre. Néanmoins, c'est assez... verbeux."),"\n",e.createElement(s.h2,null,"Un peu de spécialisation"),"\n",e.createElement(s.p,null,"Heureusement, il existe des solutions à cela et une première c'est l'héritage."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">EqualityRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">V</span> tester<span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">EqualityRule</span><span class="token punctuation">(</span><span class="token class-name">V</span> tester<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tester <span class="token operator">=</span> tester<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tester<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"En faisant ainsi, je crée une règle donc le test est spécialisé et je n'ai plus qu'à spécifier le retour,\r\nce qui alège partiellement mon code (ouf !) :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token comment">// avant</span>\r\n<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token string">"le meilleur age !"</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\r\n\r\n<span class="token comment">// apres</span>\r\n<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EqualityRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token string">"le meilleur age !"</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"En faisant ainsi je pourrait créer autant de règles de la nature souhaitée en spécialisant à volonté.\r\nPar exemple, je peux faire une règle qui n'exécute pas de code avant de retourner. Petit hic cependant,\r\njava n'autorisant pas l'héritage multiple, il ne m'est pas possible d'hériter de plusieurs règles pour les composer entre elles (outch !)."),"\n",e.createElement(s.p,null,"Autre possibilité, le ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">factory</code>'}})," : plutôt que de créer une classe pour chaque cas, je vais créer une fonction\r\nqui retournera ma clase anonyme. Par exemple, si je reprend le code au dessus :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token comment">// definitions</span>\r\n<span class="token keyword">interface</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token class-name">O</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">I</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RuleFactory</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">equalRule</span><span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">,</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> run<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n            <span class="token punctuation">}</span>\r\n\r\n            <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n                <span class="token keyword">return</span> run<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n            <span class="token punctuation">}</span>\r\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">private</span> <span class="token class-name">RuleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token comment">// utilisation</span>\r\n<span class="token punctuation">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token class-name">RuleFactory</span><span class="token punctuation">.</span><span class="token function">equalRule</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"le meilleur age !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Plutôt court, n'est-ce pas ?"),"\n",e.createElement(s.h2,null,"Uber-généralisation"),"\n",e.createElement(s.p,null,"Pour concluse cet article, je vais aborder un dernier point sur ce switch qui concerne un problème de\r\nspécialisation des règles : le fait de définir deux comportements en même temps.\r\nParce que le switch est très souple dans son traitement il est assez compliqué de vraiment prévoir tous les cas possibles\r\net souhaitables. Le dernier exemple de code ajoute d'ailleurs la définition d'une interface pour décrire les expression\r\nlambdas à passer en paramètre, qui me permet de définir le comportement de retour de façon plus concise.\r\nC'est pourquoi je vais apporter une dernière solutuion en passant deux lambdas en paramètres."),"\n",e.createElement(s.p,null,"D'abord, je peux étendre ma interface avec une classe concrète :"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneralRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Rule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> tester<span class="token punctuation">;</span>\r\n    <span class="token keyword">private</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> runner<span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">GeneralRule</span><span class="token punctuation">(</span><span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> tester<span class="token punctuation">,</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> runner<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>tester <span class="token operator">=</span> tester<span class="token punctuation">;</span>\r\n        <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> runner<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> tester<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> runner<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token comment">// plus un constructeur dans mon switch</span>\r\n<span class="token keyword">class</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>\r\n    <span class="token comment">// ...</span>\r\n    <span class="token keyword">public</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">addGeneralRule</span><span class="token punctuation">(</span><span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> tester<span class="token punctuation">,</span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> runner<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GeneralRule</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>tester<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n    <span class="token comment">// ...</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(s.p,null,"Faisant ainsi, je peux alors faire des constructeurs sur chaque comportement individuellement pour ensuite\r\nle fournir à ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RuleFactory.generalRule</code>'}}),", ça me permet alors de gagner une souplesse que je n'avais pas forcément avant."),"\n",e.createElement(s.p,null,"Cet articles est bien trop grand par rapport à ce que je voulais faire alors je vais conclure avec un dernier exemple\r\nde code avant de vouloir tout effacer pour repartir de 0. Le code complet (mal rangé) est disponible\r\n",e.createElement(s.a,{href:"https://github.com/HellperKK/HellperKK.github.io/blob/dev/blog/remaking-java-switch/Main.java"},"sur le repo du blog"),"."),"\n",e.createElement(s.p,null,"À plush !"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="java"><pre style="counter-reset: linenumber NaN" class="language-java line-numbers"><code class="language-java"><span class="token comment">// des constructeur de lambdas</span>\r\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">LambdaBuilder</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">equalTest</span><span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">rangeTest</span><span class="token punctuation">(</span><span class="token class-name">V</span> min<span class="token punctuation">,</span> <span class="token class-name">V</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> value<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">Lambda</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">valueRunner</span><span class="token punctuation">(</span><span class="token class-name">R</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Void</span> v<span class="token punctuation">)</span> <span class="token operator">-></span> result<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">private</span> <span class="token class-name">LambdaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token comment">// je reprend le premier exemple</span>\r\n<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\r\n\r\n<span class="token class-name">String</span> reponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Switcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token string">"impossible !"</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addGeneralRule</span><span class="token punctuation">(</span>\r\n        <span class="token class-name">LambdaBuilder</span><span class="token punctuation">.</span><span class="token function">equalTest</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n        <span class="token class-name">LambdaBuilder</span><span class="token punctuation">.</span><span class="token function">valueRunner</span><span class="token punctuation">(</span><span class="token string">"le meilleur age !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addGeneralRule</span><span class="token punctuation">(</span>\r\n        <span class="token class-name">LambdaBuilder</span><span class="token punctuation">.</span><span class="token function">rangeTest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\r\n        <span class="token class-name">LambdaBuilder</span><span class="token punctuation">.</span><span class="token function">valueRunner</span><span class="token punctuation">(</span><span class="token string">"en voilà un enfant !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">addGeneralRule</span><span class="token punctuation">(</span>\r\n        value <span class="token operator">-></span> value <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">,</span>\r\n        <span class="token class-name">LambdaBuilder</span><span class="token punctuation">.</span><span class="token function">valueRunner</span><span class="token punctuation">(</span><span class="token string">"bande de jeunes decadents !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reponse<span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,p.ah)(),n.components);return s?e.createElement(s,n,e.createElement(t,n)):t(n)},o=a(4988),l=a(4001),u=a(8032);const r=n=>{let{data:s,children:a}=n;const p=(0,u.c)(s.mdx.frontmatter.hero_image);return e.createElement(o.Z,{pageTitle:s.mdx.frontmatter.title},e.createElement("p",null,s.mdx.frontmatter.date),e.createElement("hr",null),e.createElement("div",{className:"flex flex-row justify-center"},e.createElement("div",null,e.createElement(u.G,{image:p,alt:s.mdx.frontmatter.hero_image_alt}),""!==s.mdx.frontmatter.hero_image_credit_link&&e.createElement("p",null,"Photo Credit:"," ",e.createElement("a",{href:s.mdx.frontmatter.hero_image_credit_link},s.mdx.frontmatter.hero_image_credit_text)))),e.createElement("div",null,a))},i=n=>{let{data:s}=n;return e.createElement(l.Z,{title:s.mdx.frontmatter.title})};function k(n){return e.createElement(r,n,e.createElement(c,n))}},1151:function(n,s,a){a.d(s,{ah:function(){return t}});var p=a(7294);const e=p.createContext({});function t(n){const s=p.useContext(e);return p.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-remaking-java-switch-index-mdx-3eaebabbd1efc9a822d1.js.map