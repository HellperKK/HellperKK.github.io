"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[147],{284:function(n,a,s){s.r(a),s.d(a,{Head:function(){return i},default:function(){return k}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({h2:"h2",p:"p",span:"span"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.h2,null,"Introduction"),"\n",e.createElement(a.p,null,"Pour cet article, j'ai décidé de parler d'un projet assez commun à faire quand on veut apprendre\r\nune nouvelle technologie, à savoir la réalisation d'une todo list. Cet exercice est assez populaire\r\nde par sa simplicité, qui permet néamoins de visiter quelques concepts clés comme la gestion\r\nd'éléments multiples."),"\n",e.createElement(a.p,null,"Pour autant durant mes presque 12 ans de pratique je ne l'avais jamais réalisé. Aussi ai-je\r\nrécemment décidé d'y palier, en utilisant la bibliothèque react. Je vais partager les différents choix\r\nque j'ai pu faire, en espérant que cela puisse vous inspirer !"),"\n",e.createElement(a.h2,null,"Usage de useImmer"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Immerjs</code>'}})," est une bibliothèque permettant de manipuler des structures de façon immutable avec du code à mutation. C'est à\r\ndire que l'on va muter un objet fourni par immer qui va enregistrer les modifications qu'on lui apporte pour générer un\r\nnouvel objet contenant ces modification. Cela évite d'avoir à cloner sa state pour pouvoir la muter après, ce qui alège\r\ngrandement le code ! Pour useImmer, il s'agit d'un hook semblable à ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useState</code>'}})," surlequel immer a été\r\nbranché. Il renvoie la même paire ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[state, setState]</code>'}})," où ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setState</code>'}})," prend la fonction de mise à jour que l'on fournirait\r\nà immer. Pour vous donner une idée plus précise, vous un exemple de code dans ma todo list:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre style="counter-reset: linenumber NaN" class="language-javascript line-numbers"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> useImmer<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>Todo<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token comment">// Un peu plus lin dans le code...</span>\r\n<span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token parameter">draft</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> todoChanging <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>todoChanging<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    todoChanging<span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token operator">!</span>todoChanging<span class="token punctuation">.</span>completed<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.h2,null,"Fonction de filtrage des todos"),"\n",e.createElement(a.p,null,"En plus d'afficher mes todo, j'ai décidé de les séparer selon qu'ils soient complets ou non pour mettre les todos complétés\r\nen dessous des autres. J'aurais pu pour cela utiliser filter deux fois, une pour ne garder que les incomplet puis une pour\r\ngarder les complets et afficher les deux l'un après l'autre. Mais cela voulais dire parcourir deux fois la liste de todos,\r\nce qui n'est pas très optimal quand la liste grandit. À la place j'ai préféré faire une fonction nouivelle de filtrage qui\r\nne rejette pas de valeur mais va plutôt séparer mobn array en deux arrays, un pour ce que je garde et un pour ce que je rejette."),"\n",e.createElement(a.p,null,"Voici mon code :"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre style="counter-reset: linenumber NaN" class="language-typescript line-numbers"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Separation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  kept<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n  rejected<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">separate</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>values<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Separation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Separation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>kept<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rejected<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      result<span class="token punctuation">.</span>kept<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r\n      result<span class="token punctuation">.</span>rejected<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"Rien de bien compliqué ici, je crée un objet avec deux arrays vides en propriétés et j'inère chaque valeur dans l'un ou\r\nl'autre, avant de retourner le résultat."),"\n",e.createElement(a.h2,null,"Fonctions d'ordre suppérieur"),"\n",e.createElement(a.p,null,"Pour les différents événements d'un todo, j'ai fait le choix d'externaliser les fonction en la plaçant en dehors du jsx.\r\nComme j'affiche plusieurs todo, j'utilise la méthode map sur l'array de todos pour générer la liste dans mon jsx. Petit\r\nproblème : j'ai besoin de savoir quel todo je veux modifier ou supprimer dans la fonction de manipulation, et je ne peux\r\npas la passer en paramètre."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber NaN" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">editTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token parameter">draft</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> todoChanging <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// comment récupérer l\'id ?</span>\r\n\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoChanging<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      todoChanging<span class="token punctuation">.</span>name <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"Pour y palier j'utilise une fonction de premier ordre, c'est à dire une fonction qui va prendre l'id en paramètre et me\r\nconstruit une fonction d'événement qui peut ensuite l'utiliser."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber NaN" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">const</span> editTodo <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEventHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLInputElement</span></span><span class="token punctuation">></span></span><span class="token plain-text"> => (e) => </span><span class="token punctuation">{</span>\r\n  <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token parameter">draft</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">const</span> todoChanging <span class="token operator">=</span> draft<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoChanging<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      todoChanging<span class="token punctuation">.</span>name <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"On peut le voir avec l'ajout de la première ligne ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">(id: number): React.ChangeEventHandler&lt;HTMLInputElement> =></code>'}}),", editTodo\r\nne correspond plus à l'événement en lui-même mais une fonction retournant un ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">React.ChangeEventHandler&lt;HTMLInputElement></code>'}}),"."),"\n",e.createElement(a.p,null,"Ma fonction s'utilise alors comme ceci :"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber NaN" class="language-jsx line-numbers"><code class="language-jsx"><span class="token punctuation">{</span>filteredTodos<span class="token punctuation">.</span>rejected<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\r\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\r\n    </span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id <span class="token operator">===</span> edit <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">editTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span> <span class="token operator">:</span> todo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">\r\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">editButton</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id <span class="token operator">===</span> edit <span class="token operator">?</span> <span class="token string">"Finish"</span> <span class="token operator">:</span> <span class="token string">"Edit"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\r\n    </span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> edit <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">swapTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>completed <span class="token operator">?</span> <span class="token string">"Undo"</span> <span class="token operator">:</span> <span class="token string">"Complete"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token plain-text">\r\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>\r\n<span class="token punctuation">)</span><span class="token punctuation">}</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"On peut voir ligne 3 l'usage de ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">editTodo</code>'}})," : la fonction est appelée avec en paramètre le todo courant de la fonction passée\r\nà map, ce qui renvoi l'événement attaché au onChange`."),"\n",e.createElement(a.h2,null,"Conclusion"),"\n",e.createElement(a.p,null,"Voilà donc pour cet article. Si l'exercice en lui-même est assez simple et passe partout je l'ai tout de même trouvé assez\r\nintéressant et cela m'a permi de réfléchir à des points auquels je n'avait pas forcément pensé de prime abord. Je compte\r\ncontinuer les exercices de code de ce genre dans un repo à part. Je n'ai pas encore publié, mais promis dès que c'est le cas\r\nje modifie cet article pour partager son code !"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(4988),l=s(4001),u=s(8032);const r=n=>{let{data:a,children:s}=n;const t=(0,u.c)(a.mdx.frontmatter.hero_image);return e.createElement(c.Z,{pageTitle:a.mdx.frontmatter.title},e.createElement("p",null,a.mdx.frontmatter.date),e.createElement("hr",null),e.createElement("div",{className:"flex flex-row justify-center"},e.createElement("div",null,e.createElement(u.G,{image:t,alt:a.mdx.frontmatter.hero_image_alt}),""!==a.mdx.frontmatter.hero_image_credit_link&&e.createElement("p",null,"Photo Credit:"," ",e.createElement("a",{href:a.mdx.frontmatter.hero_image_credit_link},a.mdx.frontmatter.hero_image_credit_text)))),e.createElement("div",null,s))},i=n=>{let{data:a}=n;return e.createElement(l.Z,{title:a.mdx.frontmatter.title})};function k(n){return e.createElement(r,n,e.createElement(o,n))}},1151:function(n,a,s){s.d(a,{ah:function(){return p}});var t=s(7294);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-react-todolist-index-mdx-7d2fab30ba4d5da33c17.js.map