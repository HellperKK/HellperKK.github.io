{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-remaking-java-switch-index-mdx-dc28527e808ec2d0e0e2.js","mappings":"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","sources":["webpack://portfolio/./node_modules/@mdx-js/react/lib/index.js","webpack://portfolio/./blog/remaking-java-switch/index.mdx","webpack://portfolio/./src/pages/blog/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Il y a quelques années maintenant je suis tombé sur un article proposant d'implémenter en java 8 les switch expression sortis en java 12 à l'aide d'expressions lambda. j'avais bien aimé sa lecture et la mise en avant de certains concepts, néanmoins j'étais déçu par plusieurs points du code final, en particulier:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Les cases n'étaient pas vraiment exécutées dans l'odre de leur décralation.\"), \"\\n\", React.createElement(_components.li, null, \"Il n'était pas vraiment possible d'étendre les cases présents\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Pour ces deux raisons, j'ai décidé de tenter moi aussi la réécriture du switch à ma manière, et de voir ce que je peux apprendre en chemin.\"), \"\\n\", React.createElement(_components.h2, null, \"Premier jet\"), \"\\n\", React.createElement(_components.p, null, \"En décortiquant la structure switch, je note trois parties:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"La valeur à match\"), \"\\n\", React.createElement(_components.li, null, \"Un ensemble de cas, chacun lié à une valeur retournée\"), \"\\n\", React.createElement(_components.li, null, \"Un cas \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">default</code>\"\n    }\n  }), \", qui renvois sa valeur si rien ne correspond avant.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Pour cete raison, il me semble important de commencer mon code par lype d'un cas, représenté par un test de correspondace et la valeur à renvoyer si le retst passe.\"), \"\\n\", React.createElement(_components.p, null, \"Pour ce faire, je décide de crée une interface :\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">R</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Une méthode pour le tester le cas et une pour le retour. Comme je ne sais pas à l'avance les types de la valeur à tester ou de celle retournée, j'ai donc besoin de deux génériques, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Value</code>\"\n    }\n  }), \", et \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Return</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"À partir de ça je peux alors définir la classe implémentant mon switch:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Rule</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> rules<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">R</span> def<span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>rules <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>def <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Où j'ai donc ma collection des règles, la valeur à tester et la valeur de retour par défaut (Si non founie, je renvois null par défaut). Je retrouve aussi les génériques utilisés dans mon interface.\"), \"\\n\", React.createElement(_components.p, null, \"Je peux ensuite ajouter trois méthodes pour m'en servir:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> rule<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    rules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>rule<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">defaults</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">R</span> def<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>def <span class=\\\"token operator\\\">=</span> def<span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">R</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> rule <span class=\\\"token operator\\\">:</span> rules<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>rule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> rule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>def<span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Rien d'extraordinaire ici, deux méthodes pour ajouter des règles et définir le default, puis une méthode pour exécuter le tout: je parcours les règles et je renvois le retour de la première valide. Ou je renvois \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this.def</code>\"\n    }\n  }), \" si je n'en trouve pas.\"), \"\\n\", React.createElement(_components.p, null, \"Avec ce code, je suis déjà en mesure de produire un exemple de switch:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">int</span> age <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n<span class=\\\"token class-name\\\">String</span> reponse <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>age<span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defaults</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"impossible !\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Integer</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"le meilleur age !\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Integer</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> value <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"en voilà un enfant !\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Integer</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">70</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"bande de jeunes decadents !\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n<span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>reponse<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Le code fait usage des classes anonymes pour chaque cas, et ça marche très bien. Un avantage est qu'on peut définir chaque cas sans avoir à recréer une classe dédiée, ce qui serait nécessaire ici puisque chaque implémentation de test est différente d'un cas à l'autre. Néanmoins, c'est assez... verbeux.\"), \"\\n\", React.createElement(_components.h2, null, \"Un peu de spécialisation\"), \"\\n\", React.createElement(_components.p, null, \"Heureusement, il existe des solutions à cela et une première c'est l'héritage.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">EqualityRule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">V</span> tester<span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">EqualityRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> tester<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>tester <span class=\\\"token operator\\\">=</span> tester<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>tester<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"En faisant ainsi, je crée une règle donc le test est spécialisé et je n'ai plus qu'à spécifier le retour, ce qui alège partiellement mon code (ouf !):\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token comment\\\">// avant</span>\\r\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Integer</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> value <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"le meilleur age !\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\r\\n\\r\\n<span class=\\\"token comment\\\">// apres</span>\\r\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">EqualityRule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"le meilleur age !\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"En faisant ainsi je pourrait créer autant de règles de la nature souhaitée en spécialisant à volonté. Par exemple, je peux faire une règle qui n'exécute pas de code avant de retourner. Petit hic cependant, java n'autorisant pas l'héritage multiple, il ne m'est pas possible d'hériter de plusieurs règles pour les composer entre elles (outch !).\"), \"\\n\", React.createElement(_components.p, null, \"Autre possibilité, le \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">factory</code>\"\n    }\n  }), \": plutôt que de créer une classe pour chaque cas, je vais créer une fonction qui retournera ma clase anonyme. Par exemple, si je reprend le code au dessus:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token comment\\\">// definitions</span>\\r\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">I</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">O</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">O</span> <span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">I</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">RuleFactory</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">equalRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> run<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n                <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n            <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n            <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">R</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n                <span class=\\\"token keyword\\\">return</span> run<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n            <span class=\\\"token punctuation\\\">}</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">RuleFactory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token comment\\\">// utilisation</span>\\r\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">RuleFactory</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equalRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token string\\\">\\\"le meilleur age !\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Plutôt court, n'est-ce pas ?\"), \"\\n\", React.createElement(_components.h2, null, \"Uber-généralisation\"), \"\\n\", React.createElement(_components.p, null, \"Pour concluse cet article, je vais aborder un dernier point sur ce switch qui concerne un problème de spécialisation des règles: le fait de définir deux comportements en même temps. Parce que le switch est très souple dans son traitement il est assez compliqué de vraiment prévoir tous les cas possibles et souhaitables. Le dernier exemple de code ajoute d'ailleurs la définition d'une interface pour décrire les expression lambdas à passer en paramètre, qui me permet de définir le comportement de retour de façon plus concise. C'est pourquoi je vais apporter une dernière solutuion en passant deux lambdas en paramètres.\"), \"\\n\", React.createElement(_components.p, null, \"D'abord, je peux étendre ma interface avec une classe concrète:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">GeneralRule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">Rule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">></span></span> tester<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> runner<span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">GeneralRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">></span></span> tester<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> runner<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>tester <span class=\\\"token operator\\\">=</span> tester<span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>runner <span class=\\\"token operator\\\">=</span> runner<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> tester<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">R</span> <span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> runner<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token comment\\\">// plus un constructeur dans mon switch</span>\\r\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token comment\\\">// ...</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">addGeneralRule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">></span></span> tester<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> runner<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        rules<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">GeneralRule</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>tester<span class=\\\"token punctuation\\\">,</span> runner<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token comment\\\">// ...</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Faisant ainsi, je peux alors faire des constructeurs sur chaque comportement individuellement pour ensuite le fournir à \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">RuleFactory.generalRule</code>\"\n    }\n  }), \", ça me permet alors de gagner une souplesse que je n'avais pas forcément avant.\"), \"\\n\", React.createElement(_components.p, null, \"Cet articles est bien trop grand par rapport à ce que je voulais faire alors je vais conclure avec un dernier exemple de code avant de vouloir tout effacer pour repartir de 0. Le code complet (mal rangé) est disponible \", React.createElement(_components.a, {\n    href: \"https://github.com/HellperKK/HellperKK.github.io/blob/master/code/switch/Main.java\"\n  }, \"sur le repo du blog\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"À plush !\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\"><pre style=\\\"counter-reset: linenumber NaN\\\" class=\\\"language-java line-numbers\\\"><code class=\\\"language-java\\\"><span class=\\\"token comment\\\">// des constructeur de lambdas</span>\\r\\n<span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LambdaBuilder</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">equalTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Comparable</span><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">></span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">V</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Boolean</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">rangeTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> min<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">V</span> max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">V</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">&amp;&amp;</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>max<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token class-name\\\">Lambda</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Void</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token function\\\">valueRunner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">R</span> result<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Void</span> v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-></span> result<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token comment\\\">// je reprend le premier exemple</span>\\r\\n<span class=\\\"token keyword\\\">int</span> age <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n<span class=\\\"token class-name\\\">String</span> reponse <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Switcher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span>age<span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defaults</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"impossible !\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addGeneralRule</span><span class=\\\"token punctuation\\\">(</span>\\r\\n        <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equalTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\r\\n        <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">valueRunner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"le meilleur age !\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addGeneralRule</span><span class=\\\"token punctuation\\\">(</span>\\r\\n        <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rangeTest</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\r\\n        <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">valueRunner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"en voilà un enfant !\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addGeneralRule</span><span class=\\\"token punctuation\\\">(</span>\\r\\n        value <span class=\\\"token operator\\\">-></span> value <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">70</span><span class=\\\"token punctuation\\\">,</span>\\r\\n        <span class=\\\"token class-name\\\">LambdaBuilder</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">valueRunner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bande de jeunes decadents !\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">run</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n<span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>reponse<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code><span aria-hidden=\\\"true\\\" class=\\\"line-numbers-rows\\\" style=\\\"white-space: normal; width: auto; left: 0;\\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"E:/Dev/HellperKK.github.io/blog/remaking-java-switch/index.mdx\";\nimport * as React from 'react';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport './syntax.css';\nimport {GatsbyImage, getImage} from 'gatsby-plugin-image';\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  const image = getImage(data.mdx.frontmatter.hero_image);\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), React.createElement(\"hr\", null), React.createElement(\"div\", {\n    className: \"flex flex-row justify-center\"\n  }, React.createElement(\"div\", null, React.createElement(GatsbyImage, {\n    image: image,\n    alt: data.mdx.frontmatter.hero_image_alt\n  }), React.createElement(\"p\", null, \"Photo Credit:\", \" \", React.createElement(\"a\", {\n    href: data.mdx.frontmatter.hero_image_credit_link\n  }, data.mdx.frontmatter.hero_image_credit_text)))), React.createElement(\"div\", {\n    className: \"xl:mx-72\"\n  }, children));\n};\nconst query = \"3930020298\";\nexport const Head = _ref2 => {\n  let {data} = _ref2;\n  return React.createElement(Seo, {\n    title: data.mdx.frontmatter.title\n  });\n};\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","ul","li","h2","span","a","_provideComponents","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","BlogPost","_ref","data","children","image","getImage","mdx","frontmatter","hero_image","Layout","pageTitle","title","date","className","GatsbyImage","alt","hero_image_alt","hero_image_credit_link","hero_image_credit_text","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}